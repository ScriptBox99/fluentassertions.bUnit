@inherits Bunit.TestContext

@code {
    
    [Fact]
    public void ReturnElementWhenTopLevelComponent()
    {
        var renderedFragment = Render(@<button data-test-id="my-button">Click me</button>);

        var element = renderedFragment.FindByDataTestId("my-button");

        element.Should().HaveDataTestId("my-button");
        element.MarkupMatches(@<button data-test-id="my-button">Click me</button>);
    }
    
    [Fact]
    public void ReturnElementWhenNestedComponent()
    {
        var renderedFragment = Render(@<div><button data-test-id="my-button">Click me</button></div>);

        var element = renderedFragment.FindByDataTestId("my-button");

        element.Should().HaveDataTestId("my-button");
        element.MarkupMatches(@<button data-test-id="my-button">Click me</button>);
    }
    
    [Fact]
    public void ReturnFirstElementWhenMultipleMatchingComponents()
    {
        var renderedFragment = Render(@<div>
                                          <button data-test-id="my-button">Click me 1</button>
                                          <button data-test-id="my-button">Click me 2</button>
                                      </div>);

        var element = renderedFragment.FindByDataTestId("my-button");

        element.Should().HaveDataTestId("my-button");
        element.MarkupMatches(@<button data-test-id="my-button">Click me 1</button>);
    }
    
    [Fact]
    public void ReturnNullWhenNoMatchingComponents()
    {
        Action aut = () => Render(@<div></div>)
            .FindByDataTestId("my-button");

        aut.Should().Throw<ElementNotFoundException>();
    }
}